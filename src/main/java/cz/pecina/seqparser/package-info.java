/* package-info.java
 *
 * Copyright (C) 2019, Tomas Pecina <tomas@pecina.cz>
 *
 * This file is part of cz.pecina.seqparser, a sequential command-line parser.
 *
 * This application is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The source code is available from <https://github.com/tompecina/seqparser>.
 */

/**
 * A sequential command-line parser. The parser is loosely based on
 * <a href="https://commons.apache.org/proper/commons-cli/">Apache Commons CLI</a>. Instead of setting options,
 * the arguments are treated as a stream of commands. Options can thus be used multiple times, with or without
 * parameters.
 *
 * <p>Example: <code>-short "Hello world!",par=15 --long-option --long-option 0 --short "Done."</code>
 *
 * <p>Short options may consist of alphanumeric characters and underscores, except the first character, which may
 * not be a digit. Similar rules apply to long options and parameter names, except that they may include dashes
 * between sub-tokens. No shortcuts are possible, both short and long options must be specified in full. Equal sign
 * (<code>=</code>) between a long option and its value is not permitted: a string of parameters must always
 * be preceded by a space (or, more precisely, be in a separate array element as the parser works with a split string
 * of arguments).
 *
 * <p>Parsing is started by creating a {@link SeqParser} object, whose method
 * {@link SeqParser#parse(Options, String[], boolean)} is then invoked, with options and arguments supplied as an
 * array of strings. {@link Options} are created by adding {@link Option} objects; these can be created by providing
 * descriptors for optional positional and keyword parameters. The types of parameters are arbitrary, controlled by the
 * {@link ParameterType} interface, which enforces the checking the parameter values.
 *
 * <p>Like the Apache Commons parsers, unrecognized arguments may be collected is a separate array, and options and
 * non-option arguments can be separated by double dash (<code>--</code>).
 *
 * <p>Quotes (both single and double) and espacing are supported, e.g. <code>-text "a, b"</code> or
 * <code>-text a\,\ b</code>. One peculiarity are positional parameters, which are generated by leading or trailing
 * separator, e.g. <code>-string x,y,</code> means three parameters, "x", "y" and "", and <code>-par ,</code> stands
 * for <em>two</em> positional parameters, both empty. Similarly, <code>-option par=</code> sets the parameter
 * <code>par</code> to an empty string.
 *
 * <p>For details, see the API for the classes.
 *
 * @author Tomáš Pecina
 * @version 1.0.0
 */
package cz.pecina.seqparser;
